#####################################
# cmake module for finding ROOT
# based on original works from Jan Engels
# modified by Benjamin Lutz
# TO-DO: handle dl library properly
#####################################

SET( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE )

SET( ROOT_FOUND FALSE )
MARK_AS_ADVANCED( ROOT_FOUND )


# include dirs
SET( ROOT_INCLUDE_DIR ROOT_INCLUDE_DIR-NOTFOUND )
MARK_AS_ADVANCED( ROOT_INCLUDE_DIR )

SET(ROOTSYS "$ENV{ROOTSYS}")

MESSAGE ( STATUS "ROOTSYS: ${ROOTSYS}")


FIND_FILE( ROOT_CONFIG
	root-config
	PATHS ${ROOT_HOME} ${ROOTSYS}
	PATH_SUFFIXES bin
	NO_DEFAULT_PATH)

MARK_AS_ADVANCED( ROOT_CONFIG )

IF ( NOT ROOTSYS AND NOT ROOT_CONFIG AND NOT ROOT_HOME )

  IF( NOT ROOT_FIND_QUIETLY )
    MESSAGE( STATUS "no ROOTSYS and ROOT_HOME set --> searching for global root-config" )
  ENDIF( NOT ROOT_FIND_QUIETLY )

  FIND_FILE( ROOT_CONFIG
	     root-config
	     PATHS ${ROOT_HOME} ${ROOTSYS}
	     PATH_SUFFIXES bin )
ENDIF ( NOT ROOTSYS AND NOT ROOT_CONFIG AND NOT ROOT_HOME)

MESSAGE( STATUS "ROOT_CONFIG: ${ROOT_CONFIG}" )
MESSAGE( STATUS "ROOT_INCLUDE_DIR: ${ROOT_INCLUDE_DIR}" )

IF ( ROOT_CONFIG )
    MESSAGE( STATUS "ASKING root-config for environment" )
    EXEC_PROGRAM(${ROOT_CONFIG} ARGS --incdir OUTPUT_VARIABLE ROOT_INCLUDE_DIR)
    EXEC_PROGRAM(${ROOT_CONFIG} ARGS --libdir OUTPUT_VARIABLE ROOT_LIB_DIR)
    EXEC_PROGRAM(${ROOT_CONFIG} ARGS --bindir OUTPUT_VARIABLE ROOT_BIN_DIR)
    MESSAGE( STATUS "  ROOT_INCLUDE_DIR: ${ROOT_INCLUDE_DIR}" )
    MESSAGE( STATUS "  ROOT_LIB_DIR: ${ROOT_LIB_DIR}" )
    MESSAGE( STATUS "  ROOT_BIN_DIR: ${ROOT_BIN_DIR}" )
ENDIF ( ROOT_CONFIG )


FIND_FILE( ROOT_CINT
	rootcint
	PATHS ${ROOT_HOME} ${ROOTSYS} ${ROOT_BIN_DIR}
	PATH_SUFFIXES bin
	NO_DEFAULT_PATH )
MARK_AS_ADVANCED( ROOT_CINT )

MESSAGE( STATUS "ROOT_CINT: ${ROOT_CINT}" )


IF( NOT ROOT_INCLUDE_DIR AND NOT ROOT_FIND_QUIETLY )
    MESSAGE( STATUS "Check for ROOT: ${ROOT_HOME}"
	    " -- failed to find ROOT include directory!!" )
ENDIF( NOT ROOT_INCLUDE_DIR AND NOT ROOT_FIND_QUIETLY )

# libraries
EXEC_PROGRAM(${ROOT_CONFIG} ARGS --libs --glibs OUTPUT_VARIABLE ROOT_CONFIG_OUTPUT)
LIST(APPEND ROOT_CONFIG_OUTPUT ${ROOT_EXTRA_LIBS})
STRING(REGEX MATCHALL "-l[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]*" ROOT_LIBS_STRINGS ${ROOT_CONFIG_OUTPUT})
STRING(REGEX REPLACE "-l" ";" ROOT_LIBS_NAMES ${ROOT_LIBS_STRINGS})

SET( ROOT_FINDLIB_FAILED FALSE )
MARK_AS_ADVANCED( ROOT_LIBS_NAMES ROOT_FINDLIB_FAILED )

FOREACH( libname ${ROOT_LIBS_NAMES} )

    SET( ROOT_LIB_${libname} ROOT_LIB_${libname}-NOTFOUND )

    FIND_LIBRARY( ROOT_LIB_${libname}
	NAMES ${libname}
	PATHS ${ROOT_HOME} ${ROOTSYS} ${ROOT_LIB_DIR}
	PATH_SUFFIXES lib
	NO_DEFAULT_PATH )

    IF( NOT ROOT_LIB_${libname} )
	SET( ROOT_FINDLIB_FAILED TRUE )
	IF( NOT ROOT_FIND_QUIETLY )
	    MESSAGE( STATUS "Check for ROOT: ${ROOT_HOME}"
		    " -- failed to find ROOT ${libname} library!!" )
	ENDIF( NOT ROOT_FIND_QUIETLY )
    ELSE( NOT ROOT_LIB_${libname} )
	LIST( APPEND ROOT_LIBS ${ROOT_LIB_${libname}} )
        UNSET( ROOT_LIB_${libname} CACHE )
    ENDIF( NOT ROOT_LIB_${libname} )
ENDFOREACH( libname ${ROOT_LIBS_NAMES} )

# check if we need DL on this plattform and find full path to it
IF ( CMAKE_DL_LIBS )
  FIND_LIBRARY( DL_LIBS_FULLPATH NAMES ${CMAKE_DL_LIBS} )
  MARK_AS_ADVANCED(DL_LIBS_FULLPATH)
ENDIF ( CMAKE_DL_LIBS )

# set variables and display results
IF( ROOT_INCLUDE_DIR AND NOT ROOT_FINDLIB_FAILED )
    SET( ROOT_LIBRARIES ${ROOT_LIBS} ${DL_LIBS_FULLPATH} )
    MARK_AS_ADVANCED( ROOT_LIBRARIES ROOT_DEFINITIONS )
    MESSAGE( STATUS "Check for ROOT: ${ROOT_HOME} -- works" )

ELSE( ROOT_INCLUDE_DIR AND NOT ROOT_FINDLIB_FAILED )
    IF( ROOT_FIND_REQUIRED )
	MESSAGE( FATAL_ERROR "Check for ROOT: ${ROOT_HOME} -- failed!!" )
    ENDIF( ROOT_FIND_REQUIRED )
    MESSAGE( STATUS "Check for ROOT: ${ROOT_HOME}"
	    " -- failed!! will skip this package..." )
ENDIF( ROOT_INCLUDE_DIR AND NOT ROOT_FINDLIB_FAILED )

MESSAGE(STATUS "--------------- ROOT SUMMARY ----------------")
MESSAGE(STATUS "ROOT_CONFIG     : " ${ROOT_CONFIG} )
MESSAGE(STATUS "ROOT_CINT       : " ${ROOT_CINT} )
MESSAGE(STATUS "ROOT_INCLUDE_DIR: " ${ROOT_INCLUDE_DIR} )
MESSAGE(STATUS "ROOT_LIBRARIES:   " "${ROOT_LIBRARIES}" )
MESSAGE(STATUS "ROOT_DEFINITIONS: " ${ROOT_DEFINITIONS} )
MESSAGE(STATUS "---------------------------------------------")
