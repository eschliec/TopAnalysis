How to measure a Differential Cross-Section DESY Ntuple-style

========Preselection
This is pretty automatic. A command like:

runall2.pl -d NtupleDirectory -c pf2pat_ntuple2.py -s -x 0.3

will run on all jobs. Usually the specified number of jobs  should be multiplied by about 0.3 and run on the 12 hour queue

export NJS_QUEUE=12

After all jobs have finished run:

./mk_lumiList

to make calculate the number of events per sample that will be used for the lumi reweighting (right now it assumes the output directories from the queue start with naf_)

This creates a directory called OriginalRoot which has the Ntuple root files and output txt files

In a Root session then run

.L merge_mc.C++
merge()

And this will add SF branches including the lumi weight and branches with the sample name and channel in a directory called mergedRoot

========Selection


Now runn the command root -l load_Analysis.C

This runs Analysis.C on each event in the root tuple for each sample. All analysis cuts are made in Analysis.C and the output are a bunch of user specified histograms.
Except for adding histograms or changing analysis cuts, additions to this file should be made as separate functions in the Analysis class.

Once this is finished, run the command:

.L Histo.C++
Histo()

This runs Histo.C which is essentially a wrapper class using plotterclass.h. 

For each histogram you want

SetOptions will specify what variable you would like plotted
fillHisto will fill the histogram and create the histogram stack
setDataset list the files and whatnot
CalcXsec explains itself
plotDiffXsec also does
write writes the histogram

the plots will be put into a directory called Plots according to the channel in .eps format which is the best


========
========
To run the new analysis:

make
./load_Analysis
