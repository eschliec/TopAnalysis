How to measure a Differential Cross-Section DESY Ntuple-style

========Preselection
This is pretty automatic. A command like:

runall2.pl -d NtupleDirectory -c pf2pat_ntuple2.py -s -x 0.3

will run on all jobs. Usually the specified number of jobs  should be multiplied by about 0.3 and run on the 12 hour queue

export NJS_QUEUE=12

This creates a directory called OriginalRoot which has the Ntuple root files and output txt files

======Analysis

The input files need to be listed in selectionList.txt as before. Current version of the
NTuple is stored in:
/data/group/top/DiffXS/8TeV/2012-11-09/Nominal (old object definition!!)

(/data/group/top/DiffXS/2012ObjectDef/ - new object definition! Nominal and systematic samples are in different folders, check with Tyler...)


so do (mergedRoot just to keep the old naming, there is no merge step):
mkdir mergedRoot
ln -s /data/group/top/DiffXS/8TeV/2012-10-25/Nominal mergedRoot/Nominal
ls -1 --color=no mergedRoot/Nominal/*.root > selectionList.txt

In case you want to run over everything, you have to do the above step inlcuding also JES_UP, JES_DOWN, JER_UP, JER_DOWN, and SIGNALSYST in addition to the Nominal sample.

To compile the code:
make

To run the analysis, do
./load_Analysis

To run only over a specific dataset, you can do
./loadAnalysis -f PATTERN
where PATTERN is in the file name. So ./loadAnalysis -f emu_ would rerun all emu selection.

The output produced is in selectionRoot, the files should be fully compatible with
the old plotterclass.h

For Nominal just do: ./runNominalParallel.pl

You also need to generate the signal variations with: ./runNominalVariations.sh

This runs Analysis.C on each event in the root tuple for each sample. All analysis cuts are made in Analysis.C and the output are a bunch of user specified histograms.
Except for adding histograms or changing analysis cuts, additions to this file should be made as separate functions in the Analysis class.

===== Histograms!
Once this is finished, run the command:

./lnData.sh
./mk_HistoFileList.sh
./Histo (check Histo.C for options to create some of the plots, with or without unfolding etc.)

This runs Histo.C which is essentially a wrapper class using plotterclass.h.

For each histogram you want

SetOptions will specify what variable you would like plotted
fillHisto will fill the histogram and create the histogram stack
setDataset list the files and whatnot
CalcXsec explains itself
plotDiffXsec also does
write writes the histogram

the plots will be put into a directory called Plots according to the channel in .eps format which is the best


========
========
To run the new analysis:



./Histo (check Histo.C for options to create some of the plots, with or without unfolding etc.)



This runs Histo.C which is essentially a wrapper class using plotterclass.h.

For each histogram you want

SetOptions will specify what variable you would like plotted
fillHisto will fill the histogram and create the histogram stack
setDataset list the files and whatnot
CalcXsec explains itself
plotDiffXsec also does
write writes the histogram

the plots will be put into a directory called Plots according to the channel in .eps format which is the best


========
========
To run the new analysis:



For nominal just do: ./runNominalParallel.pl


========

Profiling the code:
CPUPROFILE=test.prof LD_PRELOAD=/afs/desy.de/group/cms/perftool/v2.0/lib/libprofiler.so ./load_Analysis -f file
/afs/desy.de/group/cms/perftool/v2.0/bin/pprof --pdf load_Analysis test.prof >| test.pdf
