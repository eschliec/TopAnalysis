How to measure a Differential Cross-Section DESY Ntuple-style

========Preselection
This is pretty automatic. A command like:

runall2.pl -d NtupleDirectory -c ntuple.py -s

will run on all jobs. Usually you should use the 12 hour queue:
export NJS_QUEUE=12

This creates a directory called NtupleDirectory which has the Ntuple root files and output txt files

======Analysis

Current version of the NTuple is stored in:
/data/group/top/DiffXS/<date>/

The file /data/group/top/DiffXS/README contains a description of the NTuples, i.e.
what was new, which <date> to use...

The input files need to be listed in selectionList.txt as before, so do:
ls -1 --color=no /data/group/top/DiffXS/2013_01_25/*.root > selectionList.txt

To compile the code:
make -j8

To run the analysis, do
./load_Analysis

See
./loadAnalysis --help
for a list of command line options.

To run only over a specific dataset, you can do
./loadAnalysis -f PATTERN
where PATTERN is in the file name.

The output produced is in selectionRoot, the files should be fully compatible with
the old plotterclass.h

For Nominal just do: ./runNominalParallel.sh

You also need to generate the signal variations with: ./runNominalVariations.sh

This runs Analysis.C on each event in the root tuple for each sample. All analysis cuts are made in Analysis.C and the output are a bunch of user specified histograms.
Except for adding histograms or changing analysis cuts, additions to this file should be made as separate functions in the Analysis class.

===== Histograms!
Once this is finished, run the command:

./lnData.sh
./mk_HistoFileList.sh
./Histo (check Histo.C for options to create some of the plots, with or without unfolding etc.)

This runs Histo.C which is essentially a wrapper class using plotterclass.h.

For each histogram you want

SetOptions will specify what variable you would like plotted
fillHisto will fill the histogram and create the histogram stack
setDataset list the files and whatnot
CalcXsec explains itself
plotDiffXsec also does
write writes the histogram

the plots will be put into a directory called Plots according to the channel in .eps format which is the best


========
========
To run the new analysis:



./Histo (check Histo.C for options to create some of the plots, with or without unfolding etc.)



This runs Histo.C which is essentially a wrapper class using plotterclass.h.

For each histogram you want

SetOptions will specify what variable you would like plotted
fillHisto will fill the histogram and create the histogram stack
setDataset list the files and whatnot
CalcXsec explains itself
plotDiffXsec also does
write writes the histogram

the plots will be put into a directory called Plots according to the channel in .eps format which is the best


Once the plots has been created you can get the typical systematic errors for the Diff. XSection via:

./TypicalError

This runs GetTypicalErrors.C which checks for one specific systematic variation, and one specific channel (ee, emu, mumu) in all files 
    Ploos/channel/*Systematics.txt
it parses the content and for one specific systematic takes the average ('typical') systematic error.

========
========


========

Profiling the code:
CPUPROFILE=test.prof LD_PRELOAD=/afs/desy.de/group/cms/perftool/v2.0/lib/libprofiler.so ./load_Analysis -f file
/afs/desy.de/group/cms/perftool/v2.0/bin/pprof --pdf load_Analysis test.prof >| test.pdf
