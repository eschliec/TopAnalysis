#! /usr/bin/env python

import os
import sys

sets = { }
sets["4jets"                          ] = True
sets["6jets"                          ] = True
sets["default"                        ] = True
sets["electrons"                      ] = True
sets["jetOverlap"                     ] = True
sets["looseSelection"                 ] = True
sets["minSumDist"                     ] = True
sets["minSumDist_rejectOutliers"      ] = True
sets["ptOrderedMinDist"               ] = True
sets["ptOrderedMinDist_rejectOutliers"] = True
sets["tauola"                         ] = True
sets["tightSelection"                 ] = True
sets["totalMinDist"                   ] = True
sets["totalMinDist_rejectOutliers"    ] = True
sets["hadronicTopOnly"                ] = True
sets["lightQuarksOnly"                ] = True

append = { }
########################################################################################################################
append["4jets"                          ] =  "process.ttSemiLepJetPartonMatch.maxNJets = 4                           \n"
########################################################################################################################
append["6jets"                          ] =  "process.ttSemiLepJetPartonMatch.maxNJets = 6                           \n"
########################################################################################################################
append["default"                        ] =  ""
########################################################################################################################
append["electrons"                      ] =  "process.trainTtSemiLepJetCombMVA.leptons    = 'selectedPatElectrons' \n"
append["electrons"                      ] += "process.trainTtSemiLepJetCombMVA.leptonType = 'kElec'                   \n"
########################################################################################################################
append["jetOverlap"                     ] =  "process.filterJetOverlapEvent.deltaR = 0.6 \n"
########################################################################################################################
append["looseSelection"                 ] =  "process.selectedPatMuons.cut = 'pt > 15. & abs(eta) < 2.1 & (trackIso+caloIso)/pt < 0.1' \n"
append["looseSelection"                 ] += "process.selectedPatJets .cut = 'pt > 25. & abs(eta) < 2.4 & nConstituents > 0'           \n"
########################################################################################################################
append["minSumDist"                     ] =  "process.ttSemiLepJetPartonMatch.algorithm  = 1                         \n"
append["minSumDist"                     ] += "process.ttSemiLepJetPartonMatch.useMaxDist = False                     \n"
########################################################################################################################
append["minSumDist_rejectOutliers"      ] =  "process.ttSemiLepJetPartonMatch.algorithm = 1                          \n"
########################################################################################################################
append["ptOrderedMinDist"               ] =  "process.ttSemiLepJetPartonMatch.algorithm  = 2                         \n"
append["ptOrderedMinDist"               ] += "process.ttSemiLepJetPartonMatch.useMaxDist = False                     \n"
########################################################################################################################
append["ptOrderedMinDist_rejectOutliers"] =  "process.ttSemiLepJetPartonMatch.algorithm = 2                          \n"
########################################################################################################################
append["tauola"                         ] =  ""
########################################################################################################################
append["tightSelection"                 ] =  "process.selectedPatMuons.cut = 'pt > 25. & abs(eta) < 2.1 & (trackIso+caloIso)/pt < 0.1' \n"
append["tightSelection"                 ] += "process.selectedPatJets .cut = 'pt > 35. & abs(eta) < 2.4 & nConstituents > 0'           \n"
########################################################################################################################
append["totalMinDist"                   ] =  "process.ttSemiLepJetPartonMatch.algorithm  = 0                         \n"
append["totalMinDist"                   ] += "process.ttSemiLepJetPartonMatch.useMaxDist = False                     \n"
########################################################################################################################
append["totalMinDist_rejectOutliers"    ] =  "process.ttSemiLepJetPartonMatch.algorithm = 0                          \n"
#######################################################################################################################
append["hadronicTopOnly"                ] =  "process.ttSemiLepJetPartonMatch.partonsToIgnore = ['LepB']             \n"
########################################################################################################################
append["lightQuarksOnly"                ] =  "process.ttSemiLepJetPartonMatch.partonsToIgnore = ['HadB', 'LepB']     \n"
########################################################################################################################

testDir = "TopAnalysis/TopAnalyzer/test/"
confDir = "TopAnalysis/Configuration/analysis/semiLeptonic/jetCombMVA/"

def createPythonConfig(set):
    outFileName = "trainTreeSaver_" + set + "_cfg.py"
    print "Creating " + outFileName + " ..."
    ## read default config
    inFile = open(testDir + "testSemiLepJetCombMVATrainTreeSaver_cfg.py", 'r')
    str = inFile.read()
    inFile.close()
    ## append specific replacements
    str += append[set]
    ## include different cff if training with electrons instead of muons
    if(set == "electrons"):
        str = str.replace("muons_cff",
                          "electrons_cff")
    ## write new file
    outFile = open(confDir + outFileName, 'w')
    outFile.write(str)
    outFile.close()    

def createCrabConfig(set):
    outFileName = "trainTreeSaver_" + set + ".cfg"
    print "Creating " + outFileName + " ..."
    ## read default config
    inFile = open(confDir + "trainTreeSaver.test.cfg", 'r')
    str = inFile.read()
    inFile.close()
    ## replace datasetpath for training on tauola sample
    if(set == "tauola"):
        str = str.replace("/TTJets-madgraph/Fall08_IDEAL_V9_v2/GEN-SIM-RECO",
                          "/TauolaTTbar/Summer08_IDEAL_V9_v2/GEN-SIM-RECO")\
    ## use specific pset
    str = str.replace(testDir + "testSemiLepJetCombMVATrainTreeSaver_cfg.py",
                      confDir + "trainTreeSaver_" + set + "_cfg.py")
    ## set appropriate name for working_dir
    str = str.replace("crab_JetCombMVATrainTree_test",
                      "crab_JetCombMVATrainTree_" + set)
    ## write new file
    outFile = open(confDir + outFileName, 'w')
    outFile.write(str)
    outFile.close()    

def main():
    print "Starting creation of TrainTreeSaver config files..."
    k = sets.keys()
    k.sort()
    for set in k:
        if(sets[set] == True):
            print "------------------------------"
            createPythonConfig(set)
            createCrabConfig(set)
    print "------------------------------"
    print "Done."
    print "Submitting jobs to the batch system via crab..."
    for set in k:
        if(sets[set] == True):
            if(os.path.exists("crab_JetCombMVATrainTree_" + set)):
                print "Found existing working directory. Cleaning up..."
                os.system("crab -clean -c crab_JetCombMVATrainTree_" + set)
            os.system("crab -create -cfg " +confDir + "trainTreeSaver_" + set + ".cfg -submit 1-40")

if __name__ == '__main__':
    main()
