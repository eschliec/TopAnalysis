import FWCore.ParameterSet.Config as cms

#-------------------------------------------------
# test cfg file for tqaflayer1 & 2 production from
# fullsim for semi-leptonic ttbar events 
#-------------------------------------------------
process = cms.Process("TEST")

## configure message logger
process.load("FWCore.MessageLogger.MessageLogger_cfi")
process.MessageLogger.cerr.threshold = 'INFO'
#process.MessageLogger.cerr.FwkReport.reportEvery = 100

#-------------------------------------------------
# process configuration
#-------------------------------------------------

## define input
process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring(
    #219 RelVal sample at desy
    '/store/mc/Fall08/TTJets-madgraph/GEN-SIM-RECO/IDEAL_V9_v1/0008/001E41B0-51D3-DD11-85CF-00E08140EAB7.root',
    '/store/mc/Fall08/TTJets-madgraph/GEN-SIM-RECO/IDEAL_V9_v1/0008/008BC886-54D3-DD11-AB2D-001F29071CFA.root'
    #PAT test sample
    #'file:/afs/cern.ch/cms/PRS/top/cmssw-data/relval200-for-pat-testing/FullSimTTBar-2_1_X_2008-07-08_STARTUP_V4-AODSIM.100.root'
    )
)

## define maximal number of events to loop over
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1000)
)

## configure process options
process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(False)
)

## configure geometry
process.load("Configuration.StandardSequences.Geometry_cff")

## configure conditions
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.GlobalTag.globaltag = cms.string('STARTUP_V4::All')

## Magnetic field now needs to be in the high-level py
process.load("Configuration.StandardSequences.MagneticField_cff")

#-------------------------------------------------
# tqaf configuration; if you want just to produce 
# tqafLayer2 on top of an already existing
# tqafLayer1 just comment the standard tqafLayer1
# production sequence
#-------------------------------------------------

## std sequence for tqaf layer1
process.load("TopQuarkAnalysis.TopObjectProducers.tqafLayer1_cff")
process.tqaf = cms.Path(process.tqafLayer1)

## necessary fixes to run 2.2.X on 2.1.X data
## comment this when running on samples produced
## with 22X
from PhysicsTools.PatAlgos.tools.cmsswVersionTools import run22XonSummer08AODSIM
run22XonSummer08AODSIM(process)

#-------------------------------------------------
# private uni Hamburg analysis code
#-------------------------------------------------

## add event weight information
process.load("TopAnalysis.TopUtils.EventWeightPlain_cfi")
process.eventWeight.nevts = 1
process.eventWeight.xsec  = 1.
process.eventWeight.eff   = 1.
process.eventWeight.lumi  = 1.

process.wght = cms.Path(process.eventWeight)   

## test basic event selection
process.load("TopAnalysis.TopFilter.sequences.semiLepMuonSelection_step0_cff")
process.semiLepMuonSelection = cms.Path(process.preselectSemiLepMuon)   

process.load("TopAnalysis.TopFilter.sequences.fullLepElMuSelection_step0_cff")
process.fullLepElMuSelection = cms.Path(process.preselectFullLepElMu)

process.load("TopAnalysis.TopFilter.sequences.fullLepMuonSelection_step0_cff")
process.fullLepMuonSelection = cms.Path(process.preselectFullLepMuon)

## register TFileService
process.TFileService = cms.Service("TFileService",
    fileName = cms.string('analyzeCombinedSelection_step0_wjets.root')
)

## define tqaf layer1 event content
from TopQuarkAnalysis.TopObjectProducers.tqafLayer1_EventContent_cff import *
makeTqafLayer1EventContent(process)

## define event selection
process.EventSelection = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('semiLepMuonSelection',
                                   'fullLepElMuSelection',
                                   'fullLepMuonSelection')
    )
)

## configure output module
process.out = cms.OutputModule("PoolOutputModule",
    process.EventSelection,
    process.tqafEventContent,
    fileName = cms.untracked.string('combinedSelection_step0_wjets.root')
)

process.outpath = cms.EndPath(process.out)
